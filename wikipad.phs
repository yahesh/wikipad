<?php
  # wikipad.phs
  #
  # This script synchronizes Etherpad-Lite pads with
  # a DokuWiki installation. To do that it retrieves
  # all pads of the configured sub-pad, exports them
  # if necessary and writes them to the DokuWiki file
  # structure of the configured sub-wiki.
  #
  # This script is intended to be used with the
  # user the DokuWiki is running as. Additionally it
  # can be called via CRON and is optimized for
  # timeout situations.

  require_once(dirname(__FILE__) . "/../unchroot/unchroot.phs");

  require_once(dirname(__FILE__) . "/wikipad.conf.phs");
  require_once(dirname(__FILE__) . "/wikipad.def.phs");
  require_once(dirname(__FILE__) . "/wikipad.func.phs");

  function wikipad() {
    // check all preconditions
    if (checkPreconditions()) {
      // drop privileges
      if (force_unroot(PROCESS_USER, PROCESS_GROUP)) {
        // disallow concurrency (either by timeout or by lock file)
        if (disallow_concurrency(TIMEOUT)) {
          // open DB connection
          $connection = new mysqli(PAD_DB_HOST, PAD_DB_USER, PAD_DB_PASS, PAD_DB_DB, PAD_DB_PORT, PAD_DB_SOCK);

          if (NULL === $connection->connect_error) {
            // query all pad names
            $padnames_query = $connection->query(PAD_SQL_PADNAMES);

            if (false !== $padnames_query) {
              $padnames_array = NULL; // default

              do { // while (NULL !== $padnames_array);
                $padnames_array = $padnames_query->fetch_assoc();

                if (NULL !== $padnames_array) {
                  // name of pad
                  $padnames = $padnames_array[PAD_FIELD_PADNAMES];

                  // check if the pad name is alphanumeric
                  if (checkName($padnames)) {
                    // check if pad needs to be ignored
                    if (0 !== strpos($padnames, PAD_IGNORE_PREFIX)) {
                      $revisions_query = $connection->query(PAD_SQL_REVISIONS_A . $padnames . PAD_SQL_REVISIONS_B);
                      if (false !== $revisions_query) {
                        // has changed or is new
                        $changed = true;
                        $new     = true;

                        $revisions_array = $revisions_query->fetch_assoc();

                        if (NULL !== $revisions_array) {
                          // number of revisions
                          $revisions = $revisions_array[PAD_FIELD_REVISIONS];

                          // can we read the last revision from
                          // status file and has the revision
                          // changed since last time
                          if (is_readable(SYNC_STATUS_DIR . $padnames)) {
                            $file_revisions = file_get_contents(SYNC_STATUS_DIR . $padnames);

                            if ((false !== $file_revisions) && ctype_digit($file_revisions)) {
                              if ($revisions === $file_revisions) {
                                $changed = false;
                              } // if ($revisions === $file_revisions)

                              $new = false;
                            } // if ((false !== $file_revisions) && is_int($file_revisions))
                          } // if (is_readable(SYNC_STATUS_DIR . $padnames))
                        } // if (NULL !== $revisions_array)

                        $revisions_query->free();

                        if ($changed) {
                          // pad shall be ignored or removed
                          $ignore = false;
                          $remove = false;

                          // export pad content
                          $content = getURL(PAD_URL_A . $padnames . PAD_URL_B);

                          if (NULL !== $content) {
                            // check if pad shall be ignored or removed
                            if (0 === strpos($content, PAD_IGNORE_CONTENT)) {
                              $ignore = true;
                            } else { // if (0 === strpos($content, PAD_IGNORE_CONTENT))
                              if (0 === strpos($content, PAD_REMOVE_CONTENT)) {
                                $remove = true;
                              } // if (0 === strpos($content, PAD_REMOVE_CONTENT))
                            } // if (0 === strpos($content, PAD_IGNORE_CONTENT))

                            // do nothing if we have to ignore the pad
                            if (!$ignore) {
                              // either remove the pad or update it
                              if ($remove) {
                                if (file_exists(WIKI_SUB_DIR . $padnames . WIKI_SUB_EXT)) {
                                  unlink(WIKI_SUB_DIR . $padnames . WIKI_SUB_EXT);
                                  print("remove pad: " . $padnames . "\n");
                                } // if (file_exists(WIKI_SUB_DIR . $padnames . WIKI_SUB_EXT))
                              } else { // if ($remove)
                                file_put_contents(WIKI_SUB_DIR . $padnames . WIKI_SUB_EXT, $content);
                                print("update pad: " . $padnames . "\n");
                              } // if ($remove)
                            } else {
                              print("ignore pad by content: " . $padnames . "\n");
                            } // if (!$ignore)

                            // save current revision number
                            file_put_contents(SYNC_STATUS_DIR . $padnames, $revisions);
                          } else {
                            print("export failed: " . $padnames . "\n");
                          } // if (NULL !== $content)
                        } else {
                          print("unchanged: " . $padnames . "\n");
                        } // if ($changed)
                      } else {
                        print("pad revision query failed\n");
                      } // if (false !== $revisions_query)
                    } else {
                      print("ignore pad by name: " . $padnames . "\n");
                    } // if (0 !== strpos($padnames, PAD_IGNORE_PREFIX))
                  } else {
                    print("unsupported pad name: " . $padnames . "\n");
                  } // if (checkName($padnames))
                } else {
                  print("no more pads found\n");
                } // if (NULL !== $padnames_array)
              } while (NULL !== $padnames_array);

              $padnames_query->free();
            } else {
              print("pad name query failed\n");
            } // if (false !== $padnames_query)

            $connection->close();
          } else {
            print("database connection failed\n");
          } // if (NULL === $connection->connect_error)

          // free lock
          allow_concurrency(TIMEOUT);
        } else {
          print("disallow_concurrency() failed\n");
        } // if (disallow_concurrency(TIMEOUT))
      } else {
        print("force_unroot() failed\n");
      } // if (force_unroot(PROCESS_USER, PROCESS_GROUP))
    } else {
      print("checkPreconditions() failed\n");
    }  // if (checkPreconditions())
  } // function wikipad()

  wikipad();
?>
